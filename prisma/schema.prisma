// Prisma schema for SparQ Plug auth & registration
// Using SQLite for quick local dev; swap provider to postgresql or mysql in production.

datasource db {
  provider = env("DATABASE_PROVIDER") // e.g. "sqlite" | "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  admin
  manager
  client
}

enum RegistrationStatus {
  pending
  approved
  denied
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  company      String?
  role         Role
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model RegistrationRequest {
  id             String             @id @default(cuid())
  email          String
  name           String?
  company        String?
  roleRequested  Role
  passwordHash   String
  status         RegistrationStatus @default(pending)
  decisionReason String?
  decidedAt      DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@index([status])
  @@index([email])
}

// One-time password reset tokens (hashed)
model PasswordResetToken {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  tokenHash String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([expiresAt])
}

// Basic email delivery log
model EmailLog {
  id        String   @id @default(cuid())
  to        String
  template  String
  status    String   // sent | failed
  error     String?
  createdAt DateTime @default(now())

  @@index([template])
  @@index([createdAt])
}

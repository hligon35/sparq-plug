// Prisma schema for SparQ Plug auth & registration
// Using SQLite for quick local dev; swap provider to postgresql or mysql in production.

datasource db {
  // Local default. For production you can switch to: postgresql / mysql / sqlserver / mongodb (adjust URL & run migrations)
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// NOTE: SQLite in this configuration doesn't support native enums in current adapter.
// We model role & registration status as constrained strings at the application layer.
// Accepted Role values: 'admin' | 'manager' | 'client'
// Accepted RegistrationStatus values: 'pending' | 'approved' | 'denied'

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  company      String?
  role         String // Role enum simulated: admin | manager | client
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  // Relations
  passwordResetTokens PasswordResetToken[]
}

model RegistrationRequest {
  id             String             @id @default(cuid())
  email          String
  name           String?
  company        String?
  roleRequested  String // Requested role: admin | manager | client
  passwordHash   String
  status         String @default("pending") // pending | approved | denied
  decisionReason String?
  decidedAt      DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@index([status])
  @@index([email])
}

// One-time password reset tokens (hashed)
model PasswordResetToken {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  tokenHash String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([expiresAt])
}

// Basic email delivery log
model EmailLog {
  id        String   @id @default(cuid())
  to        String
  template  String
  status    String   // sent | failed
  error     String?
  createdAt DateTime @default(now())

  @@index([template])
  @@index([createdAt])
}

// Persistent audit events (replaces file-based JSON log)
model AuditEvent {
  id        String   @id @default(cuid())
  at        DateTime @default(now())
  actor     String
  tenantId  String
  action    String
  target    String?
  // SQLite lacks native JSON type; store serialized JSON string
  metadata  String?

  @@index([actor])
  @@index([action])
  @@index([at])
}
